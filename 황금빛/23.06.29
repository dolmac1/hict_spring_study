Annotation(어노테이션)

정의 
- 사전상으로는 주석의 의미이지만, Java에서는 주석 이상의 기능을 가지고 있습니다. 클래스와 메소드에 추가하여 다양한 기능을 부여합니다. Annotation을 사용함으로써 코드량이 감소하고, 유지보수가 용이하며, 생산성이 증가됩니다.
- 클래스와 메서드 등을 선얼할 때 '@'을 붙여서 사용합니다.



예제 1.

@Component(value="myman")   //개발자가 생성한 Class를 1)Spring Bean으로 등록할 때 사용

public class Man{

public Man(){

System.out.println("hello");

}

}

예제 2.

@Controller      //이 클래스는 Controller 역할을 합니다.

@RequestMapping("/user")      // 이 클래스는 /user로 들어오는 요청을 모두 처리합니다.

public class UserController{

@RequestMapping(method=RequestMethod.GET)

public String getUser(@RequestHeader(value="Accept-Language") String acceptLanguage){

// Get 메소드, /user 요청을 처리

}

}



 종류

@SpringBootApplication : Spring boot application으로 설정

@Controller : View를 제공하는 Controller로 설정

@RequestController : Rewt API를 제공하는 Controller로 설정

@RequestMapping : URL 주소를 매핑

@GetMapping : Http GetMethod URL 주소 매핑

@PostMapping : Http PostMethod URL 주소 매핑

@PutMapping : Http PutMethod URL 주소 매핑

@DeleteMapping : Http DeleteMehod URL 주소 매핑

@RequestParma : URL Query Parameter 매핑

@RequestBody : Http Body를 Parsing 매핑

@Valid : 2)POJO Java class의 검증

@Configuration : 1개 이상의 bean을 등록할 때 사용

@Component : 1개의 클래스 단위로 등록할 때 사용

@Bean : 1개의 외부 라이브러리로부터 생성한 객체를 등록 시 사용

@Autowired : DI를 위한 곳에 사용

@Qualifier : @Autowired 사용 시 Bean이 2개 이상일 때 명시적으로 사용

@Resource : @Autowired + @Qualifier의 개념으로 이해

@Aspect : AOP 적용시 사용

@Before : AOP 메소드 이전 호출 지정

@After : AOP 메소드 호출 이후 지정 예외 발생 포함

@Around : AOP 이전/이후 모두 포함 예외 발생 포함

@AfterReturning : AOP 메소드의 호출이 정상일 때 실행

@AfterThrowing : AOP 시 해당 메소드가 예외 발생 시 지정

@Test : JUnit에서 테스트할 대상을 표시

@SpringBootTest :  Spring Boot Test에 필요한 의존성을 제공



참고

1) Spring Bean

- Spring IoC 컨테이너가 관리하는 자바 객체

- 기존 자바 프로그래밍에서는 클래스를 생성하고 new를 입력하여 원하는 객체를 직접 생성한 후 사용했었다면,

   직접 new를 이용하여 생성한 객체가 아닌 Spring에 의해 관리당하는 자바 객체를 말합니다.

2) POJO(Plain Old Java Object)

- 특별한 환경(클래스나 인터페이스 등)에 종속되지 않는 일반적인 자바 객체를 의미합니다.

